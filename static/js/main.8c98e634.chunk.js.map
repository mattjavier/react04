{"version":3,"sources":["utils/GifContext/GifContext.js","components/Form/Form.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["GifContext","createContext","search","gif","handleInputChange","handleSearchGIPHY","Form","props","useContext","htmlFor","type","name","value","onChange","onClick","Card","className","style","width","src","images","original","url","alt","title","App","useState","gifState","setGifState","event","target","preventDefault","axios","get","then","data","Math","floor","random","length","useEffect","catch","err","console","error","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yMASeA,EAPIC,wBAAc,CAC/BC,OAAQ,GACRC,IAAK,GACLC,kBAAmB,aACnBC,kBAAmB,eCsBNC,EAzBF,SAAAC,GAAU,IAAD,EAMhBC,qBAAWR,GAHbE,EAHkB,EAGlBA,OACAE,EAJkB,EAIlBA,kBACAC,EALkB,EAKlBA,kBAGF,OACE,8BACE,2BACE,2BAAOI,QAAQ,UAAf,UACA,2BACEC,KAAK,OACLC,KAAK,SACLC,MAAOV,EACPW,SAAUT,KAEd,2BACE,4BAAQU,QAAST,GAAjB,mBCLOU,EAdF,WAAO,IAEVZ,EAAQK,qBAAWR,GAAnBG,IAER,OACE,yBAAKa,UAAU,OAAOC,MAAO,CAAEC,MAAO,UACpC,yBAAKC,IAAKhB,EAAIiB,OAAOC,SAASC,IAAKN,UAAU,eAAeO,IAAKpB,EAAIqB,QACrE,yBAAKR,UAAU,aACb,wBAAIA,UAAU,cAAcb,EAAIqB,U,gBCqCzBC,EA1CH,WAAO,IAAD,EAEgBC,mBAAS,CACvCxB,OAAQ,GACRC,IAAK,KAJS,mBAETwB,EAFS,KAECC,EAFD,KA6BhB,OAtBAD,EAASvB,kBAAoB,SAAAyB,GAC3BD,EAAY,2BAAKD,GAAN,kBAAiBE,EAAMC,OAAOnB,KAAOkB,EAAMC,OAAOlB,UAG/De,EAAStB,kBAAoB,SAAAwB,GAC3BA,EAAME,iBACNC,IAAMC,IAAN,0FAA6FN,EAASzB,OAAtG,uBACGgC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACHhC,EAAMgC,EAAKA,KAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKA,KAAKI,SACzDX,EAAY,2BAAKD,GAAN,IAAgBxB,aAIjCqC,qBAAU,WACRR,IAAMC,IAAI,0GACPC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACHhC,EAAMgC,EAAKA,KAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKA,KAAKI,SACzDX,EAAY,2BAAKD,GAAN,IAAgBxB,YAE5BsC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAC7B,IAGD,oCACE,yCACA,kBAAC,EAAWG,SAAZ,CAAqBjC,MAAOe,GAC1B,kBAAC,EAAD,MAEEA,EAASxB,IAAIqB,MAAQ,kBAAC,EAAD,MAAW,QC7BtBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMiB,c","file":"static/js/main.8c98e634.chunk.js","sourcesContent":["import React, { createContext } from 'react'\n\nconst GifContext = createContext({\n  search: '',\n  gif: { },\n  handleInputChange: () => { },\n  handleSearchGIPHY: () => { }\n})\n\nexport default GifContext\n","import React, { useContext } from 'react'\nimport GifContext from '../../utils/GifContext'\n\nconst Form = props => {\n\n  const {\n    search,\n    handleInputChange,\n    handleSearchGIPHY\n  } = useContext(GifContext)\n  \n  return (\n    <form>\n      <p>\n        <label htmlFor=\"search\">search</label>\n        <input\n          type=\"text\"\n          name=\"search\"\n          value={search}\n          onChange={handleInputChange} />\n      </p>\n      <p>\n        <button onClick={handleSearchGIPHY}>Search GIPHY</button>\n      </p>\n    </form>\n  )\n}\n\nexport default Form\n","import React, { useContext } from 'react'\nimport GifContext from '../../utils/GifContext'\n\nconst Card = () => {\n\n  const { gif } = useContext(GifContext)\n\n  return (\n    <div className=\"card\" style={{ width: '18rem' }}>\n      <img src={gif.images.original.url} className=\"card-img-top\" alt={gif.title} />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{gif.title}</h5>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React, { useState, useEffect } from 'react'\nimport GifContext from './utils/GifContext'\nimport Form from './components/Form'\nimport Card from './components/Card'\nimport axios from 'axios'\n\nconst App = () => {\n\n  const [gifState, setGifState] = useState({\n    search: '',\n    gif: {}\n  })\n\n  gifState.handleInputChange = event => {\n    setGifState({ ...gifState, [event.target.name]: event.target.value })\n  }\n\n  gifState.handleSearchGIPHY = event => {\n    event.preventDefault()\n    axios.get(`https://api.giphy.com/v1/gifs/search?api_key=so6QOTNdmWKPObKhaL11EhE7gGtpiiqG&q=${gifState.search}&limit=20&rating=g`)\n      .then(({ data }) => {\n        let gif = data.data[Math.floor(Math.random() * data.data.length)]\n        setGifState({ ...gifState, gif })\n      })\n  }\n\n  useEffect(() => {\n    axios.get('https://api.giphy.com/v1/gifs/search?api_key=so6QOTNdmWKPObKhaL11EhE7gGtpiiqG&q=cats&limit=20&rating=g')\n      .then(({ data }) => {\n        let gif = data.data[Math.floor(Math.random() * data.data.length)]\n        setGifState({ ...gifState, gif })\n      })\n      .catch(err => console.error(err))\n  }, [])\n\n  return (\n    <>\n      <h1>GIPHY App</h1>\n      <GifContext.Provider value={gifState}>\n        <Form />\n        {\n          gifState.gif.title ? <Card /> : null\n        }\n      </GifContext.Provider>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}